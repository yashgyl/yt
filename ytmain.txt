const { google } = require("googleapis");
const json2xls = require("json2xls");
const fs = require("fs");
const puppeteer = require("puppeteer");
const emailExtractor = require("node-email-extractor").default;
const countryLookup = require("country-code-lookup");

const QUERY = "lifestyle";
const MAX_RESULTS_PER_PAGE = 50;
const MAX_PAGES = 10; // Adjust this value to control the total number of results (e.g., 100 pages * 50 results per page = 5000 results)

const SPREADSHEET_ID = "AIzaSyAd3N_OA3n0uMH99uPcy2yTj-QryLRIp5s";
const ALLOWED_COUNTRIES = ["GB", "US", "CA"]; // UK, US, Canada

// YouTube Data API configuration
const API_KEY = "AIzaSyAEungdHiJsUD8zZ2PvYGfxVK28ADS5gYw";
const youtube = google.youtube({
  version: "v3",
  auth: API_KEY,
});

// Google Sheets API configuration
const credentials = require("/home/damner/code/youtube-data.json");
const auth = new google.auth.GoogleAuth({
  credentials,
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});
const sheets = google.sheets({ version: "v4", auth });

let exportData = [];

(async () => {
  try {
    let nextPageToken = "";
    let totalResults = 0;

    for (let page = 0; page < MAX_PAGES; page++) {
      const response = await youtube.search.list({
        part: "snippet",
        q: QUERY,
        maxResults: MAX_RESULTS_PER_PAGE,
        type: "channel",
        regionCode: "US",
        pageToken: nextPageToken,
      });

      const items = response.data.items;
      totalResults += items.length;
      console.log(`You got ${totalResults} results for your query`);

    for (const item of items) {
      const channelData = {};

      // Check if the channel is from an allowed country
      const channelId = item.id.channelId;
      const channelRegion = await getChannelRegion(channelId);
      if (!channelRegion || !ALLOWED_COUNTRIES.includes(channelRegion)) {
        console.log(
          `Skipping channel ${channelId} - Not from allowed countries.`
        );
        continue;
      }

      // Extract channel details
      channelData["channel_title"] = item.snippet.title;
      channelData["channel_description"] = item.snippet.description;
      channelData["channel_published_at"] = item.snippet.publishedAt;
      channelData["country"] = channelRegion; // Add country name field
      channelData["subscribers_count"] = await getSubscribersCount(channelId); // Add subscribers count field

      // Scrape channel page to extract business emails
      const businessEmails = await scrapeBusinessEmails(channelId);
      channelData["business_emails"] = businessEmails.join(", ");

      // Add channel data to exportData array
      exportData.push(channelData);
    }
    // Check if there's a next page, otherwise break the loop
      if (response.data.nextPageToken) {
        nextPageToken = response.data.nextPageToken;
      } else {
        break;
      }
    }
    await writeToSpreadsheet();
  } catch (err) {
    console.error(err);
  }
})();

async function getChannelRegion(channelId) {
  try {
    const response = await youtube.channels.list({
      part: "snippet",
      id: channelId,
    });

    const channel = response.data.items[0];
    if (channel && channel.snippet.country) {
      return channel.snippet.country;
    }
    return null;
  } catch (err) {
    console.error("Error getting channel region:", err);
    return null;
  }
}

async function getSubscribersCount(channelId) {
  try {
    const response = await youtube.channels.list({
      part: "statistics",
      id: channelId,
    });

    const channel = response.data.items[0];
    if (channel && channel.statistics && channel.statistics.subscriberCount) {
      return channel.statistics.subscriberCount;
    }
    return null;
  } catch (err) {
    console.error("Error getting subscribers count:", err);
    return null;
  }
}

async function scrapeBusinessEmails(channelId) {
  try {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto(`https://www.youtube.com/channel/${channelId}/about`);

    // Wait for the channel description section to be visible
    await page.waitForSelector("#description-container #description");

    // Extract business emails from the channel's description
    const descriptionElement = await page.$(
      "#description-container #description"
    );
    const descriptionText = await page.evaluate(
      (el) => el.textContent,
      descriptionElement
    );
    const emails = emailExtractor.text(descriptionText).emails;

    await browser.close();

    return emails;
  } catch (err) {
    console.error("Error scraping business emails:", err);
    return [];
  }
}

async function writeToSpreadsheet() {
  try {
    const values = exportData.map((item) => Object.values(item));

    await sheets.spreadsheets.values.append({
      spreadsheetId: SPREADSHEET_ID,
      range: "Sheet1",
      valueInputOption: "RAW",
      resource: {
        values,
      },
    });

    console.log("Data exported successfully to Google Sheets!");
  } catch (e) {
    console.error("Export error! " + e);
  }
}
